openapi: 3.0.3
info:
  title: User Microservice API
  description: Microservicio para gestión de usuarios, owners, carers y roles
  version: 1.0.0

servers:
  - url: http://localhost:8081/api/v1
    description: Servicio de Gestión de Usuarios

paths:
  # ==================== USERS ====================
  /users:
    get:
      tags:
        - User
      summary: Obtener todos los usuarios con paginación
      operationId: getUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Usuarios obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseList'

    post:
      tags:
        - User
      summary: Crear un nuevo usuario (registro)
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '400':
          description: Solicitud inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /users/{id}:
    get:
      tags:
        - User
      summary: Obtener un usuario por ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Usuario obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    put:
      tags:
        - User
      summary: Actualizar un usuario
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '200':
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    delete:
      tags:
        - User
      summary: Eliminar lógicamente un usuario
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Usuario eliminado exitosamente
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /users/email/{email}:
    get:
      tags:
        - User
      summary: Buscar usuario por email
      operationId: getUserByEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  # ==================== OWNERS ====================
  /owners:
    get:
      tags:
        - Owner
      summary: Obtener todos los owners con paginación
      operationId: getOwners
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Owners obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerResponseList'

    post:
      tags:
        - Owner
      summary: Crear un nuevo owner
      operationId: createOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerRequestDTO'
      responses:
        '201':
          description: Owner creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerResponseDTO'
        '400':
          description: Solicitud inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /owners/{id}:
    get:
      tags:
        - Owner
      summary: Obtener un owner por ID
      operationId: getOwnerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Owner obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerResponseDTO'
        '404':
          description: Owner no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    delete:
      tags:
        - Owner
      summary: Eliminar lógicamente un owner
      operationId: deleteOwner
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Owner eliminado exitosamente
        '404':
          description: Owner no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /owners/user/{userId}:
    get:
      tags:
        - Owner
      summary: Obtener owner por userId
      operationId: getOwnerByUserId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Owner encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerResponseDTO'
        '404':
          description: Owner no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  # ==================== CARERS ====================
  /carers:
    get:
      tags:
        - Carer
      summary: Obtener todos los carers con paginación
      operationId: getCarers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Carers obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarerResponseList'

    post:
      tags:
        - Carer
      summary: Crear un nuevo carer
      operationId: createCarer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarerRequestDTO'
      responses:
        '201':
          description: Carer creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarerResponseDTO'
        '400':
          description: Solicitud inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /carers/{id}:
    get:
      tags:
        - Carer
      summary: Obtener un carer por ID
      operationId: getCarerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Carer obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarerResponseDTO'
        '404':
          description: Carer no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    put:
      tags:
        - Carer
      summary: Actualizar un carer
      operationId: updateCarer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarerRequestDTO'
      responses:
        '200':
          description: Carer actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarerResponseDTO'
        '404':
          description: Carer no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    delete:
      tags:
        - Carer
      summary: Eliminar lógicamente un carer
      operationId: deleteCarer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Carer eliminado exitosamente
        '404':
          description: Carer no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /carers/user/{userId}:
    get:
      tags:
        - Carer
      summary: Obtener carer por userId
      operationId: getCarerByUserId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Carer encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarerResponseDTO'
        '404':
          description: Carer no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  # ==================== ROLES ====================
  /roles:
    get:
      tags:
        - Role
      summary: Obtener todos los roles
      operationId: getRoles
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Roles obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponseList'

    post:
      tags:
        - Role
      summary: Crear un nuevo rol
      operationId: createRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequestDTO'
      responses:
        '201':
          description: Rol creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponseDTO'

  /roles/{id}:
    get:
      tags:
        - Role
      summary: Obtener un rol por ID
      operationId: getRoleById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Rol obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponseDTO'
        '404':
          description: Rol no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    put:
      tags:
        - Role
      summary: Actualizar un rol
      operationId: updateRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequestDTO'
      responses:
        '200':
          description: Rol actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponseDTO'

    delete:
      tags:
        - Role
      summary: Eliminar un rol
      operationId: deleteRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Rol eliminado exitosamente

components:
  schemas:
    # ==================== COMMON ====================
    ApiError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string

    # ==================== BASE DTOs ====================
    BaseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64

    AbstractDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            active:
              type: boolean

    # ==================== USER ====================
    UserRequestDTO:
      type: object
      required:
        - name
        - lastName
        - email
        - password
        - phoneNumber
      properties:
        name:
          type: string
          maxLength: 60
        lastName:
          type: string
          maxLength: 60
        email:
          type: string
          format: email
          maxLength: 100
        password:
          type: string
          writeOnly: true
        phoneNumber:
          type: string
          pattern: '^\d{10,15}$'
        profilePhoto:
          type: string

    UserResponseDTO:
      allOf:
        - $ref: '#/components/schemas/AbstractDTO'
        - type: object
          properties:
            name:
              type: string
            lastName:
              type: string
            email:
              type: string
            phoneNumber:
              type: string
            profilePhoto:
              type: string

    UserResponseList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseDTO'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer

    # ==================== OWNER ====================
    OwnerRequestDTO:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          format: int64

    OwnerResponseDTO:
      allOf:
        - $ref: '#/components/schemas/AbstractDTO'
        - type: object
          properties:
            userId:
              type: integer
              format: int64

    OwnerResponseList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/OwnerResponseDTO'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer

    # ==================== CARER ====================
    CarerRequestDTO:
      type: object
      required:
        - userId
        - availabilityState
        - amountPet
      properties:
        userId:
          type: integer
          format: int64
        availabilityState:
          type: string
          enum: [AVAILABLE, NOT_AVAILABLE, BUSY]
        amountPet:
          type: integer
          format: int32
          minimum: 1

    CarerResponseDTO:
      allOf:
        - $ref: '#/components/schemas/AbstractDTO'
        - type: object
          properties:
            userId:
              type: integer
              format: int64
            availabilityState:
              type: string
              enum: [AVAILABLE, NOT_AVAILABLE, BUSY]
            amountPet:
              type: integer
              format: int32

    CarerResponseList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CarerResponseDTO'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer

    # ==================== ROLE ====================
    RoleRequestDTO:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 50

    RoleResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - type: object
          properties:
            name:
              type: string

    RoleResponseList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponseDTO'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer