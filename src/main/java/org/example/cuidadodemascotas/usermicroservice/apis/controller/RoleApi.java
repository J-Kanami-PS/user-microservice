/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.cuidadodemascotas.usermicroservice.apis.controller;

import org.example.cuidadodemascotas.usermicroservice.apis.dto.ApiError;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.RoleRequestDTO;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.RoleResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-29T07:32:37.610886900-03:00[America/Asuncion]")
@Validated
@Tag(name = "Role", description = "the Role API")
public interface RoleApi {

    /**
     * POST /roles : Crear un nuevo rol
     *
     * @param roleRequestDTO  (required)
     * @return Rol creado exitosamente (status code 201)
     *         or Solicitud inv치lida (status code 400)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "createRole",
        summary = "Crear un nuevo rol",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Rol creado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoleResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inv치lida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/roles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<RoleResponseDTO> createRole(
        @Parameter(name = "RoleRequestDTO", description = "", required = true) @Valid @RequestBody RoleRequestDTO roleRequestDTO
    );


    /**
     * DELETE /roles/{id} : Eliminar rol
     *
     * @param id ID del recurso (required)
     * @return Rol eliminado (status code 204)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "deleteRole",
        summary = "Eliminar rol",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Rol eliminado"),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/roles/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteRole(
        @Parameter(name = "id", description = "ID del recurso", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /roles/{id} : Obtener rol por ID
     *
     * @param id ID del recurso (required)
     * @return Rol obtenido (status code 200)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getRoleById",
        summary = "Obtener rol por ID",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Rol obtenido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoleResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/roles/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<RoleResponseDTO> getRoleById(
        @Parameter(name = "id", description = "ID del recurso", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /roles : Obtener todos los roles
     *
     * @return Roles obtenidos exitosamente (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getRoles",
        summary = "Obtener todos los roles",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Roles obtenidos exitosamente", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RoleResponseDTO.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/roles",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<RoleResponseDTO>> getRoles(
        
    );


    /**
     * GET /roles/search/{name} : Buscar roles por nombre
     *
     * @param name  (required)
     * @return Roles encontrados (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "searchRoles",
        summary = "Buscar roles por nombre",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Roles encontrados", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RoleResponseDTO.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/roles/search/{name}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<RoleResponseDTO>> searchRoles(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    );


    /**
     * PUT /roles/{id} : Actualizar rol
     *
     * @param id ID del recurso (required)
     * @param roleRequestDTO  (required)
     * @return Rol actualizado (status code 200)
     *         or Solicitud inv치lida (status code 400)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "updateRole",
        summary = "Actualizar rol",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Rol actualizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoleResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inv치lida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/roles/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<RoleResponseDTO> updateRole(
        @Parameter(name = "id", description = "ID del recurso", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "RoleRequestDTO", description = "", required = true) @Valid @RequestBody RoleRequestDTO roleRequestDTO
    );

}
