/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.cuidadodemascotas.usermicroservice.apis.controller;

import org.example.cuidadodemascotas.usermicroservice.apis.dto.ApiError;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.AssignRoleRequestDTO;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.RoleResponseDTO;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.UserPageResponse;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.UserRequestDTO;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.UserResponseDTO;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.UserRoleCheckResponse;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.UserRoleResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-28T00:04:19.711678100-03:00[America/Asuncion]")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    /**
     * POST /users/{userId}/roles : Asignar un rol al usuario
     *
     * @param userId ID del usuario (required)
     * @param assignRoleRequestDTO  (required)
     * @return Rol asignado exitosamente (status code 201)
     *         or Solicitud inv치lida (status code 400)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "assignRoleToUser",
        summary = "Asignar un rol al usuario",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Rol asignado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserRoleResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inv치lida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{userId}/roles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UserRoleResponseDTO> assignRoleToUser(
        @Parameter(name = "userId", description = "ID del usuario", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "AssignRoleRequestDTO", description = "", required = true) @Valid @RequestBody AssignRoleRequestDTO assignRoleRequestDTO
    );


    /**
     * GET /users/count : Contar todos los usuarios activos
     *
     * @return Conteo de usuarios (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "countUsers",
        summary = "Contar todos los usuarios activos",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Conteo de usuarios", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Long.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/count",
        produces = { "application/json" }
    )
    
    ResponseEntity<Long> countUsers(
        
    );


    /**
     * POST /users : Crear un nuevo usuario
     *
     * @param userRequestDTO  (required)
     * @return Usuario creado (status code 201)
     *         or Solicitud inv치lida (status code 400)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "createUser",
        summary = "Crear un nuevo usuario",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Usuario creado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inv치lida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UserResponseDTO> createUser(
        @Parameter(name = "UserRequestDTO", description = "", required = true) @Valid @RequestBody UserRequestDTO userRequestDTO
    );


    /**
     * DELETE /users/{id} : Eliminar usuario (soft delete)
     *
     * @param id ID del recurso (required)
     * @return Usuario eliminado (status code 204)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Eliminar usuario (soft delete)",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Usuario eliminado"),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteUser(
        @Parameter(name = "id", description = "ID del recurso", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /users/carers/available : Obtener cuidadores disponibles
     *
     * @return Cuidadores disponibles obtenidos (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getAvailableCarers",
        summary = "Obtener cuidadores disponibles",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cuidadores disponibles obtenidos", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserResponseDTO.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/carers/available",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<UserResponseDTO>> getAvailableCarers(
        
    );


    /**
     * GET /users/email/{email} : Obtener usuario por email
     *
     * @param email  (required)
     * @return Usuario obtenido (status code 200)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getUserByEmail",
        summary = "Obtener usuario por email",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Usuario obtenido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/email/{email}",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserResponseDTO> getUserByEmail(
        @jakarta.validation.constraints.Email @Parameter(name = "email", description = "", required = true, in = ParameterIn.PATH) @PathVariable("email") String email
    );


    /**
     * GET /users/{id} : Obtener usuario por ID
     *
     * @param id ID del recurso (required)
     * @return Usuario obtenido (status code 200)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Obtener usuario por ID",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Usuario obtenido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserResponseDTO> getUserById(
        @Parameter(name = "id", description = "ID del recurso", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /users/{userId}/roles : Obtener todos los roles de un usuario
     *
     * @param userId ID del usuario (required)
     * @return Roles del usuario (status code 200)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getUserRoles",
        summary = "Obtener todos los roles de un usuario",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Roles del usuario", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RoleResponseDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/roles",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<RoleResponseDTO>> getUserRoles(
        @Parameter(name = "userId", description = "ID del usuario", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    );


    /**
     * GET /users : Obtener usuarios con filtros
     *
     * @param role Filtrar por nombre de rol (CARER, OWNER, ADMIN) (optional)
     * @param search Buscar por nombre, apellido o email (optional)
     * @param page N칰mero de p치gina (0-based) (optional, default to 0)
     * @param size Tama침o de la p치gina (optional, default to 20)
     * @return Usuarios obtenidos (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getUsers",
        summary = "Obtener usuarios con filtros",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Usuarios obtenidos", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserPageResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserPageResponse> getUsers(
        @Parameter(name = "role", description = "Filtrar por nombre de rol (CARER, OWNER, ADMIN)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "role", required = false) String role,
        @Parameter(name = "search", description = "Buscar por nombre, apellido o email", in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = false) String search,
        @Min(0) @Parameter(name = "page", description = "N칰mero de p치gina (0-based)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Max(100) @Parameter(name = "size", description = "Tama침o de la p치gina", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * GET /users/{userId}/has-role/{roleName} : Verificar si usuario tiene un rol espec칤fico
     *
     * @param userId ID del usuario (required)
     * @param roleName  (required)
     * @return Verificaci칩n exitosa (status code 200)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "hasRole",
        summary = "Verificar si usuario tiene un rol espec칤fico",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Verificaci칩n exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserRoleCheckResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/has-role/{roleName}",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserRoleCheckResponse> hasRole(
        @Parameter(name = "userId", description = "ID del usuario", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "roleName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleName") String roleName
    );


    /**
     * GET /users/{userId}/is-carer : Verificar si usuario es cuidador
     *
     * @param userId ID del usuario (required)
     * @return Verificaci칩n exitosa (status code 200)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "isCarer",
        summary = "Verificar si usuario es cuidador",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Verificaci칩n exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserRoleCheckResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/is-carer",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserRoleCheckResponse> isCarer(
        @Parameter(name = "userId", description = "ID del usuario", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    );


    /**
     * GET /users/{userId}/is-owner : Verificar si usuario es due침o
     *
     * @param userId ID del usuario (required)
     * @return Verificaci칩n exitosa (status code 200)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "isOwner",
        summary = "Verificar si usuario es due침o",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Verificaci칩n exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserRoleCheckResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/is-owner",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserRoleCheckResponse> isOwner(
        @Parameter(name = "userId", description = "ID del usuario", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    );


    /**
     * DELETE /users/{userId}/roles/{roleId} : Remover un rol del usuario
     *
     * @param userId ID del usuario (required)
     * @param roleId ID del rol (required)
     * @return Rol removido exitosamente (status code 204)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "removeRoleFromUser",
        summary = "Remover un rol del usuario",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Rol removido exitosamente"),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}/roles/{roleId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> removeRoleFromUser(
        @Parameter(name = "userId", description = "ID del usuario", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "roleId", description = "ID del rol", required = true, in = ParameterIn.PATH) @PathVariable("roleId") Long roleId
    );


    /**
     * PUT /users/{id} : Actualizar usuario
     *
     * @param id ID del recurso (required)
     * @param userRequestDTO  (required)
     * @return Usuario actualizado (status code 200)
     *         or Solicitud inv치lida (status code 400)
     *         or Recurso no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Actualizar usuario",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Usuario actualizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inv치lida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UserResponseDTO> updateUser(
        @Parameter(name = "id", description = "ID del recurso", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "UserRequestDTO", description = "", required = true) @Valid @RequestBody UserRequestDTO userRequestDTO
    );

}
