/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.cuidadodemascotas.usermicroservice.apis.controller;

import org.example.cuidadodemascotas.usermicroservice.apis.dto.ApiError;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.UserRoleRequestDTO;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.UserRoleResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-27T19:08:53.202801300-03:00[America/Asuncion]")
@Validated
@Tag(name = "UserRole", description = "the UserRole API")
public interface UserRoleApi {

    /**
     * POST /user-roles : Asignar un rol a un usuario
     *
     * @param userRoleRequestDTO  (required)
     * @return Rol asignado exitosamente (status code 201)
     *         or Solicitud inválida (status code 400)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "assignRoleToUser",
        summary = "Asignar un rol a un usuario",
        tags = { "UserRole" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Rol asignado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserRoleResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user-roles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UserRoleResponseDTO> assignRoleToUser(
        @Parameter(name = "UserRoleRequestDTO", description = "", required = true) @Valid @RequestBody UserRoleRequestDTO userRoleRequestDTO
    );


    /**
     * DELETE /user-roles/{id} : Eliminar relación usuario-rol
     *
     * @param id  (required)
     * @return Relación eliminada exitosamente (status code 204)
     *         or Relación no encontrada (status code 404)
     */
    @Operation(
        operationId = "deleteUserRole",
        summary = "Eliminar relación usuario-rol",
        tags = { "UserRole" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Relación eliminada exitosamente"),
            @ApiResponse(responseCode = "404", description = "Relación no encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user-roles/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteUserRole(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /user-roles : Obtener todas las relaciones usuario-rol
     *
     * @return Relaciones obtenidas (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getAllUserRoles",
        summary = "Obtener todas las relaciones usuario-rol",
        tags = { "UserRole" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Relaciones obtenidas", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserRoleResponseDTO.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user-roles",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<UserRoleResponseDTO>> getAllUserRoles(
        
    );


    /**
     * GET /user-roles/user/{userId} : Obtener todos los roles asignados a un usuario
     *
     * @param userId  (required)
     * @return Roles del usuario (status code 200)
     *         or Usuario no encontrado (status code 404)
     */
    @Operation(
        operationId = "getRolesByUserId",
        summary = "Obtener todos los roles asignados a un usuario",
        tags = { "UserRole" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Roles del usuario", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserRoleResponseDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user-roles/user/{userId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<UserRoleResponseDTO>> getRolesByUserId(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    );


    /**
     * GET /user-roles/{id} : Obtener relación usuario-rol por ID
     *
     * @param id  (required)
     * @return Relación encontrada (status code 200)
     *         or Relación no encontrada (status code 404)
     */
    @Operation(
        operationId = "getUserRoleById",
        summary = "Obtener relación usuario-rol por ID",
        tags = { "UserRole" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Relación encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserRoleResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Relación no encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user-roles/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserRoleResponseDTO> getUserRoleById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /user-roles/role/{roleId} : Obtener todos los usuarios asignados a un rol
     *
     * @param roleId  (required)
     * @return Usuarios con el rol especificado (status code 200)
     *         or Rol no encontrado (status code 404)
     */
    @Operation(
        operationId = "getUsersByRoleId",
        summary = "Obtener todos los usuarios asignados a un rol",
        tags = { "UserRole" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Usuarios con el rol especificado", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserRoleResponseDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Rol no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user-roles/role/{roleId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<UserRoleResponseDTO>> getUsersByRoleId(
        @Parameter(name = "roleId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleId") Long roleId
    );

}
