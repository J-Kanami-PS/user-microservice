/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.cuidadodemascotas.usermicroservice.apis.controller;

import org.example.cuidadodemascotas.usermicroservice.apis.dto.ApiError;
import org.example.cuidadodemascotas.usermicroservice.apis.dto.UserRoleResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-28T00:04:19.711678100-03:00[America/Asuncion]")
@Validated
@Tag(name = "UserRole", description = "the UserRole API")
public interface UserRoleApi {

    /**
     * DELETE /user-roles/{id} : Eliminar relaci贸n usuario-rol por ID
     *
     * @param id ID del recurso (required)
     * @return Relaci贸n eliminada exitosamente (status code 204)
     *         or Recurso no encontrado (status code 404)
     */
    @Operation(
        operationId = "deleteUserRole",
        summary = "Eliminar relaci贸n usuario-rol por ID",
        tags = { "UserRole" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Relaci贸n eliminada exitosamente"),
            @ApiResponse(responseCode = "404", description = "Recurso no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user-roles/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteUserRole(
        @Parameter(name = "id", description = "ID del recurso", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /user-roles : Obtener todas las relaciones usuario-rol
     *
     * @return Relaciones obtenidas (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getAllUserRoles",
        summary = "Obtener todas las relaciones usuario-rol",
        tags = { "UserRole" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Relaciones obtenidas", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserRoleResponseDTO.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user-roles",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<UserRoleResponseDTO>> getAllUserRoles(
        
    );

}
